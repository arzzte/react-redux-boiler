// 
// mains
// 
$mainFont = '';
$secondFont = '';
$mqMob = 'screen and (max-width: 768px)';
// 
// easings
// 
$inQuad = cubic-bezier(0.55, 0.085, 0.68, 0.53);
$outQuad = cubic-bezier(0.25, 0.46, 0.45, 0.94);
$inOutQuad = cubic-bezier(0.455, 0.03, 0.515, 0.955);
$inCubic = cubic-bezier(0.55, 0.055, 0.675, 0.19);
$outCubic = cubic-bezier(0.215, 0.61, 0.355, 1);
$inOutCubic = cubic-bezier(0.645, 0.045, 0.355, 1);
$inQuart = cubic-bezier(0.895, 0.03, 0.685, 0.22);
$outQuart = cubic-bezier(0.165, 0.84, 0.44, 1);
$inOutQuart = cubic-bezier(0.77, 0, 0.175, 1);
$inQuint = cubic-bezier(0.755, 0.05, 0.855, 0.06);
$outQuint = cubic-bezier(0.23, 1, 0.32, 1);
$inOutQuint = cubic-bezier(0.86, 0, 0.07, 1);
$inExpo = cubic-bezier(0.95, 0.05, 0.795, 0.035);
$outExpo = cubic-bezier(0.19, 1, 0.22, 1);
$inOutExpo = cubic-bezier(1, 0, 0, 1);
$inBack = cubic-bezier(0.6, -0.28, 0.735, 0.045);
$outBack = cubic-bezier(0.175, 0.885, 0.32, 1.275);
$inOutBack = cubic-bezier(0.68, -0.55, 0.265, 1.55);
$inSine = cubic-bezier(0.47, 0, 0.745, 0.715);
$outSine = cubic-bezier(0.39, 0.575, 0.565, 1);
$inOutSine = cubic-bezier(0.645, 0.045, 0.355, 1);
// 

// 
// transitions
// 
$hoverIn = 0.35s $OutQuad;
$hoverOut = 0.35s $InQuad;
$t3d = translateZ(0) perspective(1px);
// 

// 
// colors
// 
$bgColor = #F7F5ED;
$txColor = #E17C1C;
// 
// secondary
// 
$desktopBase = 16;
$mobileBase = 16;

// 
// margins, paddings
// 
// 

// 
// mixins
// 
fz(d, m = d) {
  font-size: (d / $desktopBase) rem;

  @media $mqMob {
    font-size: (m / $mobileBase) rem;
  }
}

ffm() {
  font-family: $mainFont;
}

ffs() {
  font-family: $secondFont;
}

lh(d, m = d) {
  line-height: d;

  @media $mqMob {
    line-height: d;
  }
}

dfc() {
  display: flex;
  justify-content: center;
  align-items: center;
}

dfcc() {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

pf() {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
}

bspad(n) {
  box-sizing: border-box;
  padding: n;
}

rm(size) {
  return (size / $desktopBase) rem;
}

mrm(size) {
  return (size / $mobileBase) rem;
}

// 

// 
// functions
// 
vh(size) {
  return (size / 10.8vh);
}

vw(size) {
  return (size / 19.2vw);
}

vwm(size) {
  return (size / 3.75vw);
}

vhm(size) {
  fin = (size / 6.67);
  return 'calc(var(--vh, 1vh) * %s)' % fin;
}

rm(size) {
  return (size / $mobileBase) rem;
}

trns(ease, props) {
  base = b;

  for n, ind in props {
    if (ind) {
      base += ', ' + n + ' ' + ease;
    } else {
      base += ' ' + n + ' ' + ease;
    }
  }

  return substr(base, 2);
}

:export {
  desktopBase: $desktopBase;
  mobileBase: $mobileBase;
}